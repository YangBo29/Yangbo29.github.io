<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>我的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-20T12:08:57.915Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>杨波</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>javascript react-router-dom</title>
    <link href="http://yoursite.com/2017/08/12/reactRouterDom/"/>
    <id>http://yoursite.com/2017/08/12/reactRouterDom/</id>
    <published>2017-08-11T16:00:00.000Z</published>
    <updated>2018-03-20T12:08:57.915Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Mar 20 2018 21:03:19 GMT+0800 (中国标准时间) --><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Mar 20 2018 21:03:19 GMT+0800 (中国标准时间) --&gt;&lt;!-- rebuild by neat --&gt;
      
    
    </summary>
    
      <category term="原生js" scheme="http://yoursite.com/categories/%E5%8E%9F%E7%94%9Fjs/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>javascript scope</title>
    <link href="http://yoursite.com/2017/07/30/scope/"/>
    <id>http://yoursite.com/2017/07/30/scope/</id>
    <published>2017-07-29T16:00:00.000Z</published>
    <updated>2018-03-20T12:11:13.743Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Mar 20 2018 21:03:19 GMT+0800 (中国标准时间) --><p>对作用域和作用域链概念的模糊是我们在开发中导致一些‘意外’状况发生的常见原因</p><p>我们随便写一个例子来看一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">var name = &apos;bird&apos;;</span><br><span class="line">function fn()&#123;</span><br><span class="line">  console.log(name); // 1、undefined</span><br><span class="line">  var name = &apos;dog&apos;</span><br><span class="line"></span><br><span class="line">  function temp()&#123;</span><br><span class="line">    var name = &apos;cat&apos;</span><br><span class="line">    console.log(name); // 2、cat</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function item()&#123;</span><br><span class="line">    console.log(name); // 3、dog</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  temp();</span><br><span class="line">  item();</span><br><span class="line"></span><br><span class="line">  console.log(name); // 4、dog</span><br><span class="line"></span><br><span class="line">  return function()&#123;</span><br><span class="line">    console.log(name); // 5、dog</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var fn1 = fn();</span><br><span class="line"></span><br><span class="line">fn1();</span><br></pre></td></tr></table></figure><p>如果的这些结果你还会产生疑问的话，那说明你对作用域和作用域链的概念很模糊</p><p>我们先说一下在js中的作用域的概念：作用域指的是变量的适用范围； 基本分为全局作用域（window）和局部作用域（函数）</p><p>作用域的特点: 1、js中是不存在动态作用域的; 2、es6之前是不存在块级作用域的;</p><p>我们来了分析一下刚才的代码</p><p>位置1 这个位置输出 undefined 是因为js中变量提升机制所导致的 当进入一个作用域范围的时候js会预先查询在当前作用域中的var和function关键字所创建的变量，然后将这些变量的声明提升到当前作用域的顶部，但是var只能提升声明，不能赋值；而function 是提升声明并且赋值；</p><p>位置2 在当前作用域（temp函数）中可以查询到name属性；</p><p>位置3 在当前作用域（item函数）中无法查询到name属性，js机制会继续向外层查询，如果查询到了即输出；如果依旧没有找到，则继续向上级查询，直到查找到全局作用域，如果仍然查找不到，就会报错。</p><p>位置4 跟2同理</p><p>位置5 这也是证明了js中没有动态作用域；因为我们已经将fn函数的返回的函数赋值到了fn1，如果存在动态作用域的话，那输出的结果应该是‘bird’，然而他依旧是输出的‘dog’，也就是说，作用域链的查找规则是根据函数声明的位置，为不是看函数的调用位置</p><p>如果有任何疑问或者文章内有错误，可以发邮件到<a href="mailto:1043951234@qq.com" target="_blank" rel="noopener">1043951234@qq.com</a> 进行交流，如果有错误我会第一时间更正，感谢您的赐教</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Mar 20 2018 21:03:19 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;对作用域和作用域链概念的模糊是我们在开发中导致一些‘意外’状况发生的常见原因&lt;/p&gt;&lt;p&gt;我们随便写一个例子来看一下&lt;/p&gt;&lt;figure class
      
    
    </summary>
    
      <category term="原生js" scheme="http://yoursite.com/categories/%E5%8E%9F%E7%94%9Fjs/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>javascript Prototype</title>
    <link href="http://yoursite.com/2017/07/15/prototype/"/>
    <id>http://yoursite.com/2017/07/15/prototype/</id>
    <published>2017-07-14T16:00:00.000Z</published>
    <updated>2018-03-20T12:07:41.713Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Mar 20 2018 21:03:19 GMT+0800 (中国标准时间) --><p>W3C对prototype的描述是：prototype 属性使您有能力向对象添加属性和方法。<br>语法：object.prototype.name=value</p><p>让很多刚刚开始了解OOP思想的人很是迷茫。</p><p>prototype 的出现主要是为了实现“继承”的设计理念</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function Fn(name)&#123;</span><br><span class="line">  this.name = name</span><br><span class="line">  this.type = &apos;string&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var foo1 = new Fn(&apos;one&apos;);</span><br><span class="line">var foo2 = new Fn(&apos;two&apos;);</span><br><span class="line"></span><br><span class="line">console.log(foo1.type) // =&gt; string</span><br><span class="line">console.log(foo2.type) // =&gt; string</span><br><span class="line"></span><br><span class="line">foo1.type = &apos;number&apos;;</span><br><span class="line"></span><br><span class="line">console.log(foo2.type) // =&gt; string</span><br><span class="line"></span><br><span class="line">// 同一个构造函数所生成的所有实例之间相互是没有影响的（this是构造函数所生成的实例）</span><br></pre></td></tr></table></figure><p>这是我们通过 new 命令去创造一个实例的方法，但是 new 命令有一个很大的弊端，就是构造函数生成实例的时候会是属性和方法无法共享；这不仅是数据无法共享，也是资源的一种浪费；考虑到这个问题，也就在构造函数中出现了‘prototype’这个属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 我们改写一下上面的方法</span><br><span class="line"></span><br><span class="line">function Fn(name)&#123;</span><br><span class="line">  this.name = name</span><br><span class="line">  this.fn = function()&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Fn.prototype = &#123;</span><br><span class="line">  type: &apos;string&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var foo1 = new Fn(&apos;one&apos;);</span><br><span class="line">var foo2 = new Fn(&apos;two&apos;);</span><br><span class="line"></span><br><span class="line">console.log(foo1.name) // =&gt; one</span><br><span class="line">console.log(foo2.name) // =&gt; two</span><br><span class="line"></span><br><span class="line">Fn.prototype.type = &apos;number&apos;;</span><br><span class="line"></span><br><span class="line">console.log(foo2.type) // =&gt; number</span><br></pre></td></tr></table></figure><p>我们发现 type 这个属性变成了两个实例的共有属性，而构造函数修改‘prototype’属性时会影响这实例的属性；</p><p>理解起来很像是构造函数内部this上的属性是实例的私有属性，而构造函数的‘prototype’上的属性是实例的共有属性；</p><p>对 prototype 有了一些了解 我们在说一下 __proto__ 这个属性， 它可以称谓隐式原型；</p><p>我们先对这两个属性抽象理解一下:</p><p>1) 每一个函数都天生自带一个prototype（对象数据类型）属性 指向自身的原型<br>2) 每一个对象都天生自带一个__proto__属性 指向所属构造函数（类）的原型<br>3) 每一个原型都再带一个 constructor 属性 指向构造函数（类）（但是constructor这个属性是可以手动修改的）</p><p>js中的原型链也是由这俩个属性来实现的；</p><p>我们先了解一下函数的三种身份：</p><p>1) 普通函数<br>2) 构造函数<br>3) 函数对象</p><p>普通函数 ： 是我们做常用的，不管是封装也谢方法还是回调函数，都属于普通函数范围</p><p>构造函数 ： new 命名后面跟的函数 归属于构造函数，并且我们为了更方便的区分普通函数还是构造函数，在声明函数的时候，构造函数通常会采用首字母大写的方式</p><p>函数对象 ： 函数自身也是一个对象，可以有自己的属性</p><p>这也不难理解为什么js中的函数可塑性如此的高;</p><p>既然说了prototype和__proto__是为了共享属性和方法（继承）而诞生的属性，我们来看一看他们在实际中是怎么使用的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">function Parent (name,age)&#123;</span><br><span class="line">  this.name = name;</span><br><span class="line">  this.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Parent.prototype = &#123;</span><br><span class="line">    getName : function()&#123;</span><br><span class="line">      return this.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Child (name,age,sex)&#123;</span><br><span class="line">    Parent.call(this,name,age)</span><br><span class="line">    this.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Child.prototype = new Parent();</span><br><span class="line"></span><br><span class="line">var child = new Child(&apos;李雷&apos;,18,&apos;男&apos;)</span><br><span class="line"></span><br><span class="line">console.log(child.getName()); // 李雷</span><br></pre></td></tr></table></figure><p>我们写了一个简单的继承方式，在这个例子中我们不难发现，在Child这个构造函数所产生的实例中，我们可以使用Parent上的方法，这就是继承的作用，当在一个已有的构造函数中已经写过我们需要的方法，我们在合适的需求下，我们完全可以将其拿来直接使用，而不是自己在写一段重复、冗余的代码，这样也就实现了资源的共享；</p><p>__proto__ 这个属性在实际开发中我们很少直接使用，是因为这个属性牵扯的东西太多，而且IE（所有开发者的痛苦）浏览器是屏蔽开发者对这个属性的操作的；并且这个属性也是一直不被推荐使用的；</p><p>__proto__ 默认是串联所有实例和类的原型<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var ary = new Array(3);</span><br><span class="line">console.dir(ary);</span><br><span class="line"></span><br><span class="line">// 在输出台里你可以看见 \__proto__ 的指向顺序， ary -&gt; Array -&gt; Object（自身\__proto__为null，因为它已经是根源了）；这就是为什么我们声明一个数组后，就可以调用Array和Object上的方法；这也是js中为什么说万物皆对象的原因；</span><br></pre></td></tr></table></figure><p></p><p>在ES6中给出了两个操作方法:<br>1) <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf" target="_blank" rel="noopener">Object.getPrototypeOf()</a> 方法返回指定对象的原型<br>2) <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf" target="_blank" rel="noopener">Object.setPrototypeOf()</a> 方法设置一个指定的对象的原型</p><p>尽管如此，设置对象的__proto__是一个缓慢的操作，如果性能是一个问题，应该避免;</p><p>如果看过有关原型继承的书籍的话，我们会发现有很多继承的方式，在这就不一一举例了，我们直说一下寄生组合式继承，应该是目前最为理想解决继承的方法，解决了以前原型继承，组合式继承等等方法的一些小bug和缺陷</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// 借助一下上面的例子，改造一下</span><br><span class="line">function Parent (name,age)&#123;</span><br><span class="line">  this.name = name;</span><br><span class="line">  this.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Parent.prototype.getName = function()&#123; return this.name; &#125;</span><br><span class="line"></span><br><span class="line">// 在考虑Object.create 这个方法的兼容性不够，所以采用自己模拟这个功能的写法，如果不需要考虑IE9一下版本的话可以直接使用虑Object.create 更简单一些</span><br><span class="line">function inherit(sub,sup)&#123;</span><br><span class="line">  function Fn()&#123;&#125;;</span><br><span class="line">  Fn.prototype = sup.prototype;</span><br><span class="line">  var fn = new Fn();</span><br><span class="line">  Object.defineProperty(fn,&apos;constructor&apos;,&#123;value:sub&#125;) // 增强原型</span><br><span class="line">  sub.prototype = fn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Child (name,age,sex)&#123;</span><br><span class="line">    Parent.call(this,name,age)</span><br><span class="line">    this.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inherit(Child,Parent);</span><br><span class="line"></span><br><span class="line">var child = new Child(&apos;李雷&apos;,18,&apos;男&apos;)</span><br><span class="line"></span><br><span class="line">console.log(child.getName()); // 李雷</span><br></pre></td></tr></table></figure><p>希望对正在学习这方面只是的小伙伴们有帮助吧, 以上观点也是我总结的一些。</p><p>如果有任何疑问或者文章内有错误，可以发邮件到<a href="mailto:1043951234@qq.com" target="_blank" rel="noopener">1043951234@qq.com</a> 进行交流，如果有错误我会第一时间更正，感谢您的赐教</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Mar 20 2018 21:03:19 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;W3C对prototype的描述是：prototype 属性使您有能力向对象添加属性和方法。&lt;br&gt;语法：object.prototype.name=
      
    
    </summary>
    
      <category term="原生js" scheme="http://yoursite.com/categories/%E5%8E%9F%E7%94%9Fjs/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>react 声明周期</title>
    <link href="http://yoursite.com/2017/07/02/reactLifeCycle/"/>
    <id>http://yoursite.com/2017/07/02/reactLifeCycle/</id>
    <published>2017-07-01T16:00:00.000Z</published>
    <updated>2018-03-18T11:16:24.612Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Mar 20 2018 21:03:19 GMT+0800 (中国标准时间) --><h2 id="react-的声明周期"><a href="#react-的声明周期" class="headerlink" title="react 的声明周期"></a>react 的声明周期</h2><p>先上一张图，我们会根据这张图来分析</p><p><img src="http://ww1.sinaimg.cn/large/e315dd2ely1fpcn2xuccbj21280huglz.jpg" alt=""></p><p>react的声明周期其实是可以分为两大类的，第一种是组件实例化时只执行一次的，第二种是组件存在时会跟着组件内部操作而触发的；那就让我们分别来看看他们在react的一个组件组件中所充当的角色</p><h3 id="一、getDefaultProps"><a href="#一、getDefaultProps" class="headerlink" title="一、getDefaultProps"></a>一、getDefaultProps</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import React from <span class="string">'react'</span>; *以后的代码省略这行代码了</span><br><span class="line">import PropTypes from <span class="string">'prop-types'</span>;</span><br><span class="line"></span><br><span class="line">class Component extends React.Component&#123;</span><br><span class="line">  static defaultProps = &#123;</span><br><span class="line">      name: <span class="string">'yang'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span></span>() &#123;</span><br><span class="line">      <span class="built_in">return</span> (</span><br><span class="line">        &lt;div&gt;Hello, &#123;this.props.name&#125;&lt;/div&gt;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当组件实例化的时候会执行defaultProps这个函数，作用是设置组件所需参数的默认值、也可以配合prop-types这个包来进行参数验证<a href="https://reactjs.org/docs/typechecking-with-proptypes.html" target="_blank" rel="noopener">prop-types</a></p><p>注释 ： extends 是 es6 中类继承的语法；<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 例如： 你想让类A 继承类B 那么写法 就是</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">B</span> </span>&#123;</span><br><span class="line"> <span class="comment">//(类的名字最好是首字母大写，保持这种良好的代码风格)</span></span><br><span class="line"> <span class="keyword">constructor</span>()&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="comment">// 在es5 一个构造函数继承另外一个构造函数的时候，会有很多方法：call继承，原型继承，组合式继承，寄生组合式继承（如果不知道的小伙变要好好学习了）</span></span><br><span class="line">    <span class="comment">// 而es6 中类继承则是通过super来进行的 ，super的特性不属于本篇文章的讨论范围，如果感兴趣的话可以去翻查一下</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="二、getInitialState"><a href="#二、getInitialState" class="headerlink" title="二、getInitialState"></a>二、getInitialState</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class Component extends React.Component&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span></span>()&#123;</span><br><span class="line">    super();</span><br><span class="line">    this.state = &#123;</span><br><span class="line">      render: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当组件实例化的时候会对实例的一些私有属性进行初始化，对es6语法了解的话，应该很容易理解，如果对es6的class类的语法不了解的话建议大家先去了解一下<a href="http://es6.ruanyifeng.com/#docs/class" target="_blank" rel="noopener">es6</a>, state是组件内部状态，这个属性十分的重要，state的属性变更会直接影响这组件的渲染</p><h3 id="三、componentWillMount"><a href="#三、componentWillMount" class="headerlink" title="三、componentWillMount"></a>三、componentWillMount</h3><p>是组件挂载前的最后一个生命周期，只执行一次，最后修改state的机会</p><h3 id="四-render"><a href="#四-render" class="headerlink" title="四 render"></a>四 render</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Component extends React.Component&#123;</span><br><span class="line">  constructor()&#123;</span><br><span class="line">    super();</span><br><span class="line">    this.state = &#123;</span><br><span class="line">      name: &apos;yang&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  render()&#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt; `hello $&#123;this.state.name&#125;`&lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>组件渲染，render方法会根据return 的返回结果生成虚拟的DOM，经过react内部机制的<a href="http://www.ruanyifeng.com/blog/2012/08/how_to_read_diff.html" target="_blank" rel="noopener">DOM Diff</a> 比对后，渲染到页面上。<br>在render函数中有几个注意事项:<br>1) 必须存在一个根节点<br>2) 不可以修改state<br>3) 可以输出null，false</p><h3 id="五-componentDidMount"><a href="#五-componentDidMount" class="headerlink" title="五 componentDidMount"></a>五 componentDidMount</h3><p>组件挂载完成，通常我们会在这个生命周期函数内进行页面数据的请求操作， 只会执行一次</p><h3 id="六-componentWillReceiveProps"><a href="#六-componentWillReceiveProps" class="headerlink" title="六 componentWillReceiveProps"></a>六 componentWillReceiveProps</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>()&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      name: <span class="keyword">this</span>.props.name || <span class="string">'yang'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  componentWillReceiveProps(nextProps)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> nextProps.name !== <span class="string">'undefined'</span>)&#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">          name: nextProps.name</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt; <span class="string">`hello <span class="subst">$&#123;<span class="keyword">this</span>.state.name&#125;</span>`</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>当外部传入的参数发生改变的时候会触发componentWillReceiveProps这个函数的执行，在函数里可以修改本组件的state值，不用担心会引起render的多次调用</p><h3 id="七-shouldComponentUpdate"><a href="#七-shouldComponentUpdate" class="headerlink" title="七 shouldComponentUpdate"></a>七 shouldComponentUpdate</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>()&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      name: <span class="keyword">this</span>.props.name || <span class="string">'yang'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  shouldComponentUpdate(nextProps,nextState)&#123;</span><br><span class="line">    <span class="keyword">return</span> nextProps.name != <span class="keyword">this</span>.props.name;</span><br><span class="line">  &#125;</span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt; <span class="string">`hello <span class="subst">$&#123;<span class="keyword">this</span>.state.name&#125;</span>`</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>这个生命周期函数是在props和state发生改变时必然会触发的，如果没有手动声明，默认为true ，如果手动设置为false 组件将不会在更新；这个生命周期是开发者在react开发的时候对性能优化上帮助最大的，很多开发这都轻视了这个函数。</p><h3 id="八-componentWillUpdate"><a href="#八-componentWillUpdate" class="headerlink" title="八 componentWillUpdate"></a>八 componentWillUpdate</h3><p>state或者props发生改变时，在组件准备更新之前执行的生命周期函数，在这个生命周期内不要在去修改state和props 不然后果很严重</p><h3 id="九-componentDidUpdate"><a href="#九-componentDidUpdate" class="headerlink" title="九 componentDidUpdate"></a>九 componentDidUpdate</h3><p>组件重新渲染后会被调用，在这个函数中可以获取到更新之后的数据和dom元素</p><h3 id="十-componentWillUnmount"><a href="#十-componentWillUnmount" class="headerlink" title="十 componentWillUnmount"></a>十 componentWillUnmount</h3><p>当用户执行移除组件或者删除组件的操作后，在执行前触发的生命周期函数，但是react对善后工作做的不是很到位，如果你在组件中创建了计时器这种异步操作事件，在componentWillUnmount函数中一定要手动的移除这些事件，否则会报错<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>()&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      name: <span class="keyword">this</span>.props.name || <span class="string">'yang'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  componentDidMount()&#123;</span><br><span class="line">    <span class="keyword">this</span>.timer = setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;<span class="attr">name</span>:<span class="string">'我要卸载了'</span>&#125;)</span><br><span class="line">    &#125;,<span class="number">5000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  componentWillUnmount()&#123;</span><br><span class="line">    clearTimeout(<span class="keyword">this</span>.timer)</span><br><span class="line">  &#125;</span><br><span class="line">  handelClick()&#123;</span><br><span class="line">    ReactDom.unmountComponentAtNode(<span class="built_in">window</span>.root)</span><br><span class="line">  &#125;</span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div onClick=&#123;<span class="keyword">this</span>.handelClick&#125;&gt; <span class="string">`hello <span class="subst">$&#123;<span class="keyword">this</span>.state.name&#125;</span>`</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p></p><p>对react 生命周期的以一些理解，希望对您有帮助，图中conponentWillReceiveProps 应该是com 拼错了</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Mar 20 2018 21:03:19 GMT+0800 (中国标准时间) --&gt;&lt;h2 id=&quot;react-的声明周期&quot;&gt;&lt;a href=&quot;#react-的声明周期&quot; class=&quot;headerlink&quot; title=&quot;react 的声
      
    
    </summary>
    
      <category term="前端框架" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>react 基础篇（三）</title>
    <link href="http://yoursite.com/2017/06/25/reactBase3/"/>
    <id>http://yoursite.com/2017/06/25/reactBase3/</id>
    <published>2017-06-24T16:00:00.000Z</published>
    <updated>2018-03-18T11:15:53.165Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Mar 20 2018 21:03:19 GMT+0800 (中国标准时间) --><h2 id="react-的基本语法"><a href="#react-的基本语法" class="headerlink" title="react 的基本语法"></a>react 的基本语法</h2><p>首先我们要了解react 的jsx语法</p><p>react 使用 jsx 语法来代替常规的javascript 使用起来很像 html+javascript的组合</p><p>jsx的优点 ：<br>1、执行更快，因为它在编译为 JavaScript 代码后进行了优化<br>2、它是类型安全的，在编译过程中就能发现错误<br>3、使用 JSX 编写模板更加简单快速</p><p>注意事项 ： 1、 想要在jsx中使用js语法需要使用‘{}’ 例： { this.state.name }<br>2、 在jsx 中不能使用if else 可以改用三元运算符<br>3、 jsx 中的注释写法 ：{/*注释…*/}</p><hr><p>我们先看一下这么一段代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 本篇文章代码必须引入的两个组件，后面的代码中省略</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">'20170109'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">build</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;h1&gt;&#123;str&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">            &lt;h2&gt;&#123;true ? str : null&#125;&lt;/</span>h2&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">let el = &lt;div&gt;&#123;build('react的基本语法！')&#125;&lt;/</span>div&gt;;</span><br><span class="line">ReactDOM.render(el, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>));</span><br></pre></td></tr></table></figure><hr><p>下面我们看一下组件的写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> student1 = &#123;<span class="attr">name</span>: <span class="string">'小明'</span>, <span class="attr">age</span>: <span class="number">15</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> student2 = &#123;<span class="attr">name</span>: <span class="string">'李雷'</span>, <span class="attr">age</span>: <span class="number">16</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Achievement</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="comment">// 这个组件在调用时，默认会调用render方法</span></span><br><span class="line">        <span class="keyword">let</span> &#123;name,age&#125; = <span class="keyword">this</span>.props; <span class="comment">// 使用解构的方法可以让我们在写参数的时候更少</span></span><br><span class="line">        <span class="keyword">return</span> &lt;p&gt;&#123;name&#125; &#123;age&#125;&lt;/p&gt;;</span><br><span class="line">        <span class="comment">// 也可以 return &lt;p&gt;&#123;this.props.name&#125; &#123;this.props.age&#125;&lt;/p&gt;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件的传参的两种方法，可以使用es6的解构方式，也可以一个个传</span></span><br><span class="line">ReactDOM.render(&lt;div&gt;</span><br><span class="line">    &lt;Achievement &#123;...student1&#125;/&gt;</span><br><span class="line">    &lt;Achievement name=&#123;student2.name&#125; age=&#123;student2.age&#125;/&gt;</span><br><span class="line">&lt;/div&gt;, window.root);</span><br><span class="line"></span><br><span class="line">// 注意 ： &lt;Achievement age=9/&gt; 这样传递参数的时候，在组件内部调用this.props.age 的时候是字符串类型而不是数字类型</span><br><span class="line"></span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>列表类的输出方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> students = [</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'李雷'</span>, <span class="attr">sex</span>: <span class="string">'男'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'李华'</span>, <span class="attr">sex</span>: <span class="string">'男'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'小红'</span>, <span class="attr">sex</span>: <span class="string">'女'</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">(</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &#123;lessons.map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> (</span><br><span class="line">                &lt;li key=&#123;index&#125;&gt;姓名：&#123;item.name&#125;;性别：&#123;item.sex&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">            )</span></span><br><span class="line"><span class="regexp">        )&#125;</span></span><br><span class="line"><span class="regexp">    &lt;/u</span>l&gt;</span><br><span class="line">), <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>));</span><br></pre></td></tr></table></figure><p>一定要注意的是 如果你有代码的格式洁癖，请用() 将代码包裹起来，防止react不能正常解析这段代码，在react中循环输出的时候一定要在输出的元素上添加 key 属性，否则会出现警报，虽然这个警报不会影响你代码的执行，但是会影响性能，因为在react 中保证性能的 DOM Diff 会使用到这个属性 ,不是本篇文章的讨论范围</p><hr><p>属性上的渲染</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> style = &#123;</span><br><span class="line">    backgroundColor : <span class="string">'red'</span>,</span><br><span class="line">    color : <span class="string">'blue'</span>,</span><br><span class="line">    fontSize : <span class="string">'20px'</span></span><br><span class="line">&#125;;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">(</span><br><span class="line">    &lt;ul style=&#123;style&#125;&gt;</span><br><span class="line">        &lt;li className=<span class="string">'aa'</span>&gt;<span class="number">1</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">        &lt;li&gt;&lt;label htmlFor='aa'&gt;-&lt;/</span>label&gt;&lt;input id='aa'/&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li dangerouslySetInnerHTML=&#123;&#123;<span class="attr">__html</span>:<span class="string">'&lt;span&gt;123&lt;/span&gt;'</span>&#125;&#125;&gt;&lt;/li&gt;</span><br><span class="line">    &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br><span class="line"><span class="regexp">,window.root);</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 这里需要注意的是 这里的style是对象数据类型</span></span><br></pre></td></tr></table></figure><p>要了解是react中dom的属性有一些已经变成react中的关键字，所以写法上会和以前的写法不同，例如：class -&gt; className; for -&gt; htmlFor …</p><p>如果你必不可免的要在一个结构中插入许多标签，可以使用dangerouslySetInnerHTML（安全插入），因为有可能不合时宜的使用innerHTML会导致XSS攻击；</p><hr><p>事件上的绑定</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们以input 来举例， 顺便也说以下react 实现双向数据绑定的方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Input</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;<span class="attr">val</span>:<span class="string">''</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    handleFn(e)&#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;<span class="attr">val</span>:e.target.value&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;input type=<span class="string">"text"</span> value=&#123;<span class="keyword">this</span>.state.val&#125; onChange=&#123;<span class="keyword">this</span>.handleFn.bind(<span class="keyword">this</span>)&#125;/&gt;</span><br><span class="line">                &#123;<span class="keyword">this</span>.state.val&#125;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 写法二</span></span><br><span class="line"><span class="regexp">class Input extends React.Component&#123;</span></span><br><span class="line"><span class="regexp">    constructor()&#123;</span></span><br><span class="line"><span class="regexp">        super();</span></span><br><span class="line"><span class="regexp">        this.state = &#123;val:''&#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    handleFn = (e)=&gt;&#123;</span></span><br><span class="line"><span class="regexp">        this.setState(&#123;val:e.target.value&#125;);</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    render()&#123;</span></span><br><span class="line"><span class="regexp">        return (</span></span><br><span class="line"><span class="regexp">            &lt;div&gt;</span></span><br><span class="line"><span class="regexp">                &lt;input type="text" value=&#123;this.state.val&#125; onChange=&#123;this.handleFn&#125;/</span>&gt;</span><br><span class="line">                &#123;<span class="keyword">this</span>.state.val&#125;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(&lt;Input/</span>&gt;,<span class="built_in">window</span>.root);</span><br></pre></td></tr></table></figure><p>上面有两种写法，当然第二种使用了es6和es7的语法所以写起来很简洁，也不用担心this错误的问题，所以在babel可以解析的语法，我们都可以在项目中使用</p><p>我们简单说一下 react 的双向数据绑定，大家都知道react 是 MVC框架（单向数据绑定），所以我们想实现双向数据绑定就要借助其他的方法，react 能引起视图渲染的方法只有修改state和props，所以我们想要是想双向数据绑定，我们就要去操作state和props，那我们实现一下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">val</span>: <span class="string">''</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  changeFn = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">val</span>: e.target.value&#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Input value=&#123;<span class="keyword">this</span>.state.val&#125; changeFn=&#123;<span class="keyword">this</span>.changeFn&#125;/&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Input</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">val</span>: <span class="string">''</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  handleFn = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">val</span>: e.target.value&#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123;value,changeFn&#125; = <span class="keyword">this</span>.props;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input type=<span class="string">"text"</span> value=&#123;<span class="keyword">this</span>.state.val&#125; onChange=&#123;<span class="keyword">this</span>.handleFn&#125;/&gt;</span><br><span class="line">        &#123;<span class="keyword">this</span>.state.val&#125;</span><br><span class="line">        &lt;input type=<span class="string">"text"</span> value=&#123;value&#125; onChange=&#123;changeFn&#125;/&gt;</span><br><span class="line">        &#123;value&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(&lt;Parent/</span>&gt;,<span class="built_in">window</span>.root)</span><br></pre></td></tr></table></figure><p>需要用事件来触发state或者props的修改来让视图重新渲染，来实现双向绑定</p><p>还有一种不提倡的方法，就是直接通过ref 来操作DOM也可以实现，不过既然使用react了，还在操作DOM 那就太low了。所以我们要习惯这种数据驱动视图的思想。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Mar 20 2018 21:03:19 GMT+0800 (中国标准时间) --&gt;&lt;h2 id=&quot;react-的基本语法&quot;&gt;&lt;a href=&quot;#react-的基本语法&quot; class=&quot;headerlink&quot; title=&quot;react 的基
      
    
    </summary>
    
      <category term="前端框架" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>react 基础篇（二）</title>
    <link href="http://yoursite.com/2017/06/18/reactBase2/"/>
    <id>http://yoursite.com/2017/06/18/reactBase2/</id>
    <published>2017-06-17T16:00:00.000Z</published>
    <updated>2018-03-18T11:15:25.699Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Mar 20 2018 21:03:19 GMT+0800 (中国标准时间) --><h3 id="webpack-的基本配置"><a href="#webpack-的基本配置" class="headerlink" title="webpack 的基本配置"></a>webpack 的基本配置</h3><p>想要实现项目的自动化管理，还是需要依赖自动化构建工具，这篇文章主要讲述的是webpack的基本配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install webpack webpack-dev-server --save-dev <span class="comment">// 或者使用yarn</span></span><br><span class="line">$ npm install style-loader css-loader url-loader file-loader less-loader html-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure><p>上面安装的的是一个项目基本必须要使用的一些依赖包<br>安装完成之后我们来看一下webpack该如何配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个插件是为了webpack打包后的代码可以插入到我们html中的</span></span><br><span class="line"><span class="keyword">let</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">"html-webpack-plugin"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们先配置一个文件配置</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">"./src/index.js"</span>, <span class="comment">// 入口文件</span></span><br><span class="line">  output: &#123; <span class="comment">// 出口</span></span><br><span class="line">    filename: <span class="string">"build.js"</span>,  <span class="comment">// 文件名</span></span><br><span class="line">    path: <span class="built_in">require</span>(<span class="string">'path'</span>).resolve(<span class="string">'/dist'</span>) <span class="comment">// 文件路径，这个需要填写绝对路径，所以我们引用path插件，来将一个相对路径转换成绝对路径</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [ <span class="comment">// 配置文件解析规则，</span></span><br><span class="line">      &#123;<span class="attr">test</span>: <span class="regexp">/\.js$/</span>, <span class="attr">use</span>: <span class="string">"babel-loader"</span>, <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">use</span>: [<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>]&#125;,</span><br><span class="line">      &#123;<span class="attr">test</span>: <span class="regexp">/\.less$/</span>, <span class="attr">use</span>: [<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>, <span class="string">"less-loader"</span>]&#125;,</span><br><span class="line">      &#123;<span class="attr">test</span>: <span class="regexp">/\.(jpg|png|gif|jpeg)$/</span>, <span class="attr">use</span>: <span class="string">"url-loader"</span>&#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  devtool: <span class="string">'source-map'</span>, <span class="comment">/*源码映射*/</span></span><br><span class="line">  plugins: [ <span class="comment">// 插件</span></span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">"./index.html"</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>多个文件的配置方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: &apos;./src/app.js&apos;,</span><br><span class="line">    search: &apos;./src/search.js&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: &apos;[name].js&apos;,</span><br><span class="line">    path: __dirname + &apos;/dist&apos;</span><br><span class="line">  &#125;</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.css88.com/doc/webpack/" target="_blank" rel="noopener">webpack</a>还有更多的配置参数，我们先配置一个简单的</p><p>当然我们想要将环境跑起来，还需要在package.json文件中的scripts中配置一些启动环境的指令</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 截取部分代码</span></span><br><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"dev"</span>: <span class="string">"webpack-dev-server --config webpack.config.js"</span>,</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"npm run dev"</span>,</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"webpack --config webpack.config.js"</span> <span class="comment">// 打包时使用的代码</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>配置完成后，我们就可以执行 start 来开启一个本地端口来运行我们的代码了</p><p>是不是很简单呢，快来写一写react代码来感受一下吧</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Mar 20 2018 21:03:19 GMT+0800 (中国标准时间) --&gt;&lt;h3 id=&quot;webpack-的基本配置&quot;&gt;&lt;a href=&quot;#webpack-的基本配置&quot; class=&quot;headerlink&quot; title=&quot;webp
      
    
    </summary>
    
      <category term="前端框架" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>react 基础篇（一）</title>
    <link href="http://yoursite.com/2017/06/11/reactBase1/"/>
    <id>http://yoursite.com/2017/06/11/reactBase1/</id>
    <published>2017-06-10T16:00:00.000Z</published>
    <updated>2018-03-18T11:14:37.145Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Mar 20 2018 21:03:19 GMT+0800 (中国标准时间) --><h2 id="react-安装"><a href="#react-安装" class="headerlink" title="react 安装"></a>react 安装</h2><p>对于入门的人来说，是从无到有的过程，首先我们要先了解一下如何使用框架</p><p>1、首先要安装node.js 在<a href="http://nodejs.cn/" target="_blank" rel="noopener">Node</a>下载，node的版本会影响你可用的功能和一些语法支持，所以尽量使用高版本的node</p><p>2、node会自带npm包管理器，<a href="https://www.npmjs.com/" target="_blank" rel="noopener">Npm</a>，使用npm的指令来安装react项目中需要用到的组件，插件，翻译官(babel)等,如果下载缓慢的话可以采用taobao镜像，也可以使用yarn来安装，速度会快一些。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>3、创建一个新的文件夹，在这个文件夹中调用命令窗口（Shift+右键）调用cmd命令窗口<br>输入指令<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm init  <span class="comment">// 生成一个package.json文件 ，一步步配置文件信息</span></span><br><span class="line">$ npm init -y <span class="comment">// 自动提取文件信息生成一个默认的package.json文件</span></span><br></pre></td></tr></table></figure><p></p><p>如果想使用yarn 首先要通过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install yarn -g  //来安装</span><br></pre></td></tr></table></figure><p>之后就可以使用yarn的语法了</p><p>4、安装react：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install react react-dom</span><br><span class="line">//或者</span><br><span class="line">$ yarn add react react-dom</span><br></pre></td></tr></table></figure><p>在react项目中还需要很多辅助插件：</p><p>babel 这个翻译官 是在框架项目中必备的，它可以将项目中的es2015(es6)-es2017(es8)的语法转换成现在所有浏览器支持程度最高的es5语法；【注意】：像Set、Map这种是不会被翻译的。</p><p>babel 的核心包 babel-core</p><p>5、安装babel<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm babel-core babel-preset-stage-0 babel-preset-react babel-loader babel-preset-env --save-dev</span><br><span class="line"></span><br><span class="line">// --save-dev 是将安装这些依赖包安装在开发环境中</span><br></pre></td></tr></table></figure><p></p><p>在现在流行的框架开发中，有开发环境和生产环境，所谓的开发环境就是项目在开发过程中所依赖的环境；生产环境就是上线之后，项目面对用户的真实环境</p><p>6、配置文件</p><p>我们还需要在根目录下创建一个 .babelrc 文件（没有文件名称）在里面配置一些东西</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// .babelrc 文件内</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">  &quot;presets&quot;:[&quot;react&quot;,&quot;env&quot;,&quot;stage-0&quot;]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>** env是可以解析es6及以前的语法，但是在用的后发现，他无法解析es6以上的一些草案语法，所以为了可以使用更高级的语法，在后面加上stage-0 保险起见；</p><p>完成以上操作其实你就已经开启了你的react之旅了</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Mar 20 2018 21:03:19 GMT+0800 (中国标准时间) --&gt;&lt;h2 id=&quot;react-安装&quot;&gt;&lt;a href=&quot;#react-安装&quot; class=&quot;headerlink&quot; title=&quot;react 安装&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="前端框架" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>javascript Ajax</title>
    <link href="http://yoursite.com/2017/05/07/ajax/"/>
    <id>http://yoursite.com/2017/05/07/ajax/</id>
    <published>2017-05-06T16:00:00.000Z</published>
    <updated>2018-03-18T11:18:44.130Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Mar 20 2018 21:03:19 GMT+0800 (中国标准时间) --><p>在学习AJAX原理的时候我尝试这封装过自己的AJAX，作为我学习AJAX的纪念吧<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> * 参数</span><br><span class="line"> * url : 请求地址</span><br><span class="line"> * method : 请求类型</span><br><span class="line"> * data : 请求参数</span><br><span class="line"> * dataType : 数据类型</span><br><span class="line"> * async : 是否异步</span><br><span class="line"> * cache : 是否清缓存</span><br><span class="line"> * success : 成功执行函数</span><br><span class="line"> * error : 失败后执行函数</span><br><span class="line"> * timeoutTimer : 等待时长</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">(function () &#123;</span><br><span class="line">  class ajaxFn &#123;</span><br><span class="line">    constructor(url, options) &#123;</span><br><span class="line">      // 如果传入的是一个对象的话，options 就被 url 替换</span><br><span class="line">      if (typeof url === &apos;object&apos;) &#123;</span><br><span class="line">        options = url;</span><br><span class="line">        url = undefined;</span><br><span class="line">      &#125;</span><br><span class="line">      options = Object.prototype.toString.call(options).slice(8, -1) === &apos;Object&apos; ? options : &#123;&#125;;</span><br><span class="line">      this.url = url || options.url;</span><br><span class="line">      this.options = &#123;</span><br><span class="line">        method: options.type || options.method || &apos;GET&apos;,</span><br><span class="line">        data: options.data || null,</span><br><span class="line">        dataType: options.dataType || &apos;JSON&apos;,</span><br><span class="line">        async: options.async || true,</span><br><span class="line">        cache: options.cache || true,</span><br><span class="line">        success: typeof options.success === &apos;function&apos; ? options.success : function () &#123;</span><br><span class="line">        &#125;,</span><br><span class="line">        error: typeof options.error === &apos;function&apos; ? options.error : function () &#123;</span><br><span class="line">        &#125;,</span><br><span class="line">        timeoutTimer: options.timeoutTimer || null</span><br><span class="line">      &#125;;</span><br><span class="line">      this.isGet = /(^|\s+)(head|detele|get)(\s+|$)/i.test(this.options.method);</span><br><span class="line">      this.isLocal = window.XMLHttpRequest;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    formatData() &#123;</span><br><span class="line">      if (Object.prototype.toString.call(this.options.data).slice(8, -1) === &apos;Object&apos;) &#123;</span><br><span class="line">        let obj = this.options.data,</span><br><span class="line">          str = ``;</span><br><span class="line">        for (let key in obj) &#123;</span><br><span class="line">          if (obj.hasOwnProperty(key)) &#123;</span><br><span class="line">            str += `$&#123;key&#125;=$&#123;obj[key]&#125;&amp;`</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        str = str.replace(/&amp;$/g, &apos;&apos;);</span><br><span class="line">        this.options.data = str;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    queryURL() &#123;</span><br><span class="line">      return this.url.indexOf(&quot;?&quot;) === -1 ? &quot;?&quot; : &quot;&amp;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cacheFn() &#123;</span><br><span class="line">      return !this.cache ? `$&#123;this.queryURL()&#125;_=$&#123;Math.random()&#125;` : ``;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    createStandardXHR() &#123;</span><br><span class="line">      try &#123;</span><br><span class="line">        return new window.XMLHttpRequest();</span><br><span class="line">      &#125; catch (e) &#123;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    createActiveXHR() &#123;</span><br><span class="line">      try &#123;</span><br><span class="line">        return new window.ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</span><br><span class="line">      &#125; catch (e) &#123;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    serialize(form) &#123;</span><br><span class="line">      let parts = [],</span><br><span class="line">        field = null,</span><br><span class="line">        option,</span><br><span class="line">        optValue;</span><br><span class="line">      for (let i = 0; i &lt; form.elements.length; i++) &#123;</span><br><span class="line">        field = form.elements[i];</span><br><span class="line">        switch (field.type) &#123;</span><br><span class="line">          case &quot;select-one&quot;:</span><br><span class="line">          case &quot;select-multiple&quot;:</span><br><span class="line">            if (field.name.length) &#123;</span><br><span class="line">              for (let j = 0; j &lt; field.options.length; j++) &#123;</span><br><span class="line">                option = field.options[j];</span><br><span class="line">                if (option.selected) &#123;</span><br><span class="line">                  optValue = &apos;&apos;;</span><br><span class="line">                  if (optioin.hasAttribute) &#123;</span><br><span class="line">                    optValue = (option.hasAttribute(&apos;value&apos;) ? option.value : option.text);</span><br><span class="line">                  &#125; else &#123;</span><br><span class="line">                    optValue = (option.attributes[&apos;value&apos;].specified ? option.value : option.text);</span><br><span class="line">                  &#125;</span><br><span class="line">                  parts.push(encodeURIComponent(field.name) + &apos;=&apos; + encodeURIComponent(optValue));</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line">          case undefined: //字段集</span><br><span class="line">          case &apos;file&apos;: //文件输入</span><br><span class="line">          case &apos;submit&apos;: //提交按钮</span><br><span class="line">          case &apos;reset&apos;: //重置按钮</span><br><span class="line">          case &apos;button&apos;: //自定义按钮</span><br><span class="line">            break;</span><br><span class="line">          case &apos;radio&apos;: //单选按钮</span><br><span class="line">          case &apos;checkbox&apos;: //复选框</span><br><span class="line">            if (!field.checked) &#123;</span><br><span class="line">              break;</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line">          default:</span><br><span class="line">            if (field.name.length) &#123;</span><br><span class="line">              parts.push(encodeURIComponent(field.name) + &apos;=&apos; + encodeURIComponent(field.value));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      return parts.join(&apos;&amp;&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  window.ajax = function (url, options) &#123;</span><br><span class="line">    let example = new ajaxFn(url, options);</span><br><span class="line">    url = example.url || null;</span><br><span class="line">    options = example.options || &#123;&#125;;</span><br><span class="line">    let xhr = example.isLocal ? example.createStandardXHR() : example.createActiveXHR();</span><br><span class="line">    xhr.onreadystatechange = function () &#123;</span><br><span class="line">      if (xhr.readyState === 2) &#123;</span><br><span class="line">        let response = xhr.responseText;</span><br><span class="line">      &#125;</span><br><span class="line">      if (xhr.readyState === 4) &#123;</span><br><span class="line">        if (xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300 || xhr.status === 304) &#123;</span><br><span class="line">          let response = xhr.responseText;</span><br><span class="line">          options.success(response);</span><br><span class="line">        &#125;</span><br><span class="line">        if (xhr.status &gt;= 400 &amp;&amp; xhr.status &lt; 600) &#123;</span><br><span class="line">          let response = xhr.responseText;</span><br><span class="line">          options.error(response);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    if (options.data != null) &#123;</span><br><span class="line">      example.formatData();</span><br><span class="line">      if (example.isGet) &#123;</span><br><span class="line">        url += example.queryURL() + encodeURIComponent(options.data);</span><br><span class="line">        options.data = null;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    example.isGet &amp;&amp; (url += example.cacheFn());</span><br><span class="line"></span><br><span class="line">    xhr.open(options.method, url, options.async);</span><br><span class="line">    xhr.send(options.data);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Mar 20 2018 21:03:19 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;在学习AJAX原理的时候我尝试这封装过自己的AJAX，作为我学习AJAX的纪念吧&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight pl
      
    
    </summary>
    
      <category term="原生js" scheme="http://yoursite.com/categories/%E5%8E%9F%E7%94%9Fjs/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>javascript Utils</title>
    <link href="http://yoursite.com/2017/05/06/jsCommonFn/"/>
    <id>http://yoursite.com/2017/05/06/jsCommonFn/</id>
    <published>2017-05-05T16:00:00.000Z</published>
    <updated>2018-03-18T11:18:44.120Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Mar 20 2018 21:03:19 GMT+0800 (中国标准时间) --><p>平时在工作中我们在使用javascript开发的时候会很怀念jQuery，因为Jquery中很多的方法都非常的好用，而且还能兼容ie的低版本浏览器，虽然大家现在都在慢慢的抛弃ie低版本的浏览器，不过一些方法的封装思想还是要常常回顾一下，温故而知新嘛！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br></pre></td><td class="code"><pre><span class="line">var utils = (function () &#123;</span><br><span class="line">    var _flag = /MSIE [678]/i.test(navigator.userAgent);</span><br><span class="line"></span><br><span class="line">    var toTrim = function (str) &#123;</span><br><span class="line">        return str.replace(/^\s+|\s+$/g, &apos;&apos;);</span><br><span class="line">    &#125;;</span><br><span class="line">    var toJSON = function (str) &#123;</span><br><span class="line">        return window.JSON ? JSON.parse(str) : eval(&apos;(&apos; + str + &apos;)&apos;);</span><br><span class="line">    &#125;;</span><br><span class="line">    var toArray = function (classAry) &#123;</span><br><span class="line">        var ary = [];</span><br><span class="line">        if (!_flag) &#123;</span><br><span class="line">            ary = Array.prototype.slice.call(classAry);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            for (var i = 0; i &lt; classAry.length; i++) &#123;</span><br><span class="line">                ary[ary.length] = classAry[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return ary;</span><br><span class="line">    &#125;;</span><br><span class="line">    var getEleClassName = function (strClass, context) &#123;</span><br><span class="line">        context = context || document;</span><br><span class="line">        if (!_flag) &#123;</span><br><span class="line">            getEleClassName = function (strClass, context) &#123;</span><br><span class="line">                context = context || document;</span><br><span class="line">                return toArray(context.getElementsByClassName(strClass));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            getEleClassName = function (strClass, context) &#123;</span><br><span class="line">                context = context || document;</span><br><span class="line">                var result = [],</span><br><span class="line">                    classNode = context.getElementsByTagName(&apos;*&apos;);</span><br><span class="line">                strClass = strClass.replace(/^\s+|\s+$/g, &apos;&apos;).split(/\s+/);</span><br><span class="line">                for (var i = 0; i &lt; classNode.length; i++) &#123;</span><br><span class="line">                    var item = classNode[i],</span><br><span class="line">                        itemClass = item.className,</span><br><span class="line">                        flag = true;</span><br><span class="line">                    for (var j = 0; j &lt; strClass.length; j++) &#123;</span><br><span class="line">                        var reg = new RegExp(&apos;(^|\\s)&apos; + strClass[j] + &apos;(\\s+|$)&apos;);</span><br><span class="line">                        if (!reg.test(itemClass)) &#123;</span><br><span class="line">                            flag = false;</span><br><span class="line">                            break;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    flag ? result.push(item) : null;</span><br><span class="line">                &#125;</span><br><span class="line">                return result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return getEleClassName(strClass, context);</span><br><span class="line">    &#125;;</span><br><span class="line">    var getEleChildren = function (curEle, tagName) &#123;</span><br><span class="line">        var result = [],</span><br><span class="line">            childNode = curEle.childNodes;</span><br><span class="line">        for (var i = 0; i &lt; childNode.length; i++) &#123;</span><br><span class="line">            var item = childNode[i];</span><br><span class="line">            if (item.nodeType === 1) &#123;</span><br><span class="line">                if (tagName) &#123;</span><br><span class="line">                    if (item.nodeName === tagName.toLocaleUpperCase()) &#123;</span><br><span class="line">                        result.push(item);</span><br><span class="line">                    &#125;</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line">                result.push(item);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;;</span><br><span class="line">    var getCss = function (curEle, attr) &#123;</span><br><span class="line">        if (!_flag) &#123;</span><br><span class="line">            getCss = function (curEle, attr) &#123;</span><br><span class="line">                var value = window.getComputedStyle(curEle, null)[attr];</span><br><span class="line">                var reg = /^-?\d+(\.\d+)?(px|pt|em|rem)?$/g;</span><br><span class="line">                reg.test(value) ? value = parseFloat(value) : null;</span><br><span class="line">                return value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            getCss = function (curEle, attr) &#123;</span><br><span class="line">                var value = null;</span><br><span class="line">                if (attr === &apos;opacity&apos;) &#123;</span><br><span class="line">                    value = curEle.currentStyle[&apos;filter&apos;];</span><br><span class="line">                    value = (value === &apos;&apos;) ? 1 : value.replace(/(?:=)(.+)(?:\))/g, function () &#123;</span><br><span class="line">                        return arguments[1] / 100;</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    value = curEle.currentStyle[attr];</span><br><span class="line">                &#125;</span><br><span class="line">                var reg = /^-?\d+(\.\d+)?(px|pt|em|rem)?$/g;</span><br><span class="line">                reg.test(value) ? value = parseFloat(value) : null;</span><br><span class="line">                return value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return getCss(curEle, attr);</span><br><span class="line">    &#125;;</span><br><span class="line">    var setCss = function (curEle, attr, value) &#123;</span><br><span class="line">        if (attr === &apos;opacity&apos;) &#123;</span><br><span class="line">            curEle.style[&apos;opacity&apos;] = value;</span><br><span class="line">            curEle.style[&apos;filter&apos;] = &apos;alpha(opacity=&apos; + value * 100 + &apos;)&apos;;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        !isNaN(value) &amp;&amp; !/^(zIndex|zoom|fontWeight|lineHeight)$/i.test(attr) ? value += &apos;px&apos; : null;</span><br><span class="line">        curEle.style[attr] = value;</span><br><span class="line">    &#125;;</span><br><span class="line">    var setGroupCss = function (curEle, options) &#123;</span><br><span class="line">        if (Object.prototype.toString.call(options).slice(8, -1) !== &apos;Object&apos;) return;</span><br><span class="line">        for (var key in options) &#123;</span><br><span class="line">            if (options.hasOwnProperty(key)) &#123;</span><br><span class="line">                setCss(curEle, key, options[key]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    var css = function () &#123;</span><br><span class="line">        var len = arguments.length,</span><br><span class="line">            fn = getCss,</span><br><span class="line">            type = Object.prototype.toString.call(arguments[1]).slice(8, -1);</span><br><span class="line">        len &gt;= 3 ? fn = setCss : (len === 2 &amp;&amp; type === &apos;Object&apos;) ? fn = setGroupCss : null;</span><br><span class="line">        return fn.apply(this, arguments);</span><br><span class="line">    &#125;;</span><br><span class="line">    var offset = function (curEle) &#123;</span><br><span class="line">        var $t = curEle.offsetTop,</span><br><span class="line">            $l = curEle.offsetLeft,</span><br><span class="line">            $p = curEle.offsetParent;</span><br><span class="line">        while ($p.nodeName !== &apos;BODY&apos;) &#123;</span><br><span class="line">            if (/MSIE 8/i.test(navigator.userAgent)) &#123;</span><br><span class="line">                $t += $p.clientTop;</span><br><span class="line">                $l += $p.clientLeft;</span><br><span class="line">            &#125;</span><br><span class="line">            $t += $p.offsetTop;</span><br><span class="line">            $l += $p.offsetLeft;</span><br><span class="line">            $p = $p.offsetParent;</span><br><span class="line">        &#125;</span><br><span class="line">        return &#123;top: $t, left: $l&#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    var winBox = function (attr, value) &#123;</span><br><span class="line">        if (typeof value !== &apos;undefined&apos;) &#123;</span><br><span class="line">            document.documentElement[attr] = value;</span><br><span class="line">            document.body[attr] = value;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        return document.documentElement[attr] || document.body[attr]</span><br><span class="line">    &#125;;</span><br><span class="line">    var hasClass = function (curEle, cls) &#123;</span><br><span class="line">        var flag = true,</span><br><span class="line">            reg = null,</span><br><span class="line">            curClassName = curEle.className;</span><br><span class="line">        cls = toTrim(cls).split(/\s+/);</span><br><span class="line">        if (cls.length &lt;= 1) &#123;</span><br><span class="line">            reg = new RegExp(&apos;(?:^|\\s+)&apos; + cls + &apos;(?:\\s+|$)&apos;);</span><br><span class="line">            return curClassName.match(reg);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            for (var i = 0; i &lt; cls.length; i++) &#123;</span><br><span class="line">                reg = new RegExp(&apos;(?:^|\\s+)&apos; + cls[i] + &apos;(?:\\s+|$)&apos;);</span><br><span class="line">                if (!reg.test(curClassName)) &#123;</span><br><span class="line">                    flag = false;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            return flag;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    var addClass = function (curEle, cls) &#123;</span><br><span class="line">        cls = toTrim(cls).split(/\s+/);</span><br><span class="line">        for (var i = 0; i &lt; cls.length; i++) &#123;</span><br><span class="line">            if (!hasClass(curEle, cls[i])) &#123;</span><br><span class="line">                curEle.className += &apos; &apos; + cls[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        curEle.className = toTrim(curEle.className).replace(/\s+/g, &apos; &apos;);</span><br><span class="line">    &#125;;</span><br><span class="line">    var removeClass = function (curEle, cls) &#123;</span><br><span class="line">        cls = toTrim(cls).split(/\s+/);</span><br><span class="line">        for (var i = 0; i &lt; cls.length; i++) &#123;</span><br><span class="line">            if (hasClass(curEle, cls[i])) &#123;</span><br><span class="line">                var reg = new RegExp(&apos;(?:^|\\s)&apos; + cls[i] + &apos;(?:\\s|$)&apos;);</span><br><span class="line">                curEle.className = curEle.className.replace(reg, &apos; &apos;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        curEle.className = toTrim(curEle.className).replace(/\s+/g, &apos; &apos;);</span><br><span class="line">    &#125;;</span><br><span class="line">    var addEventHandler = function (target, type, fn) &#123;</span><br><span class="line">        if (target.addEventListener) &#123;</span><br><span class="line">            target.addEventListener(type, fn);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            target.attachEvent(&quot;on&quot; + type, fn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    var removeEventHandler = function (target, type, fn) &#123;</span><br><span class="line">        if (target.removeEventListener) &#123;</span><br><span class="line">            target.removeEventListener(type, fn);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            target.detachEvent(&quot;on&quot; + type, fn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    var siblings = function (curEle, tagName) &#123;</span><br><span class="line">        var result = [];</span><br><span class="line">        var previous = curEle.previousSibling;</span><br><span class="line">        var next = curEle.nextSibling;</span><br><span class="line">        if (tagName) &#123;</span><br><span class="line">            tagName = toTrim(tagName);</span><br><span class="line">            if (/\.[\w-]/g.test(tagName)) &#123;</span><br><span class="line">                tagName = tagName.replace(/\./g, &apos;&apos;);</span><br><span class="line">                var reg = new RegExp(&apos;(?:^|\\s+)&apos; + tagName + &apos;(?:\\s+|$)&apos;);</span><br><span class="line">                while (previous) &#123;</span><br><span class="line">                    if (reg.test(previous.className)) &#123;</span><br><span class="line">                        result.unshift(previous);</span><br><span class="line">                    &#125;</span><br><span class="line">                    previous = previous.previousSibling;</span><br><span class="line">                &#125;</span><br><span class="line">                while (next) &#123;</span><br><span class="line">                    if (reg.test(next.className)) &#123;</span><br><span class="line">                        result.push(next)</span><br><span class="line">                    &#125;</span><br><span class="line">                    next = next.nextSibling;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                while (previous) &#123;</span><br><span class="line">                    if (previous.nodeName === tagName.toLocaleUpperCase()) &#123;</span><br><span class="line">                        result.unshift(previous);</span><br><span class="line">                    &#125;</span><br><span class="line">                    previous = previous.previousSibling;</span><br><span class="line">                &#125;</span><br><span class="line">                while (next) &#123;</span><br><span class="line">                    if (next.nodeName === tagName.toLocaleUpperCase()) &#123;</span><br><span class="line">                        result.push(next)</span><br><span class="line">                    &#125;</span><br><span class="line">                    next = next.nextSibling;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            while (previous) &#123;</span><br><span class="line">                if (previous.nodeType === 1) &#123;</span><br><span class="line">                    result.unshift(previous);</span><br><span class="line">                &#125;</span><br><span class="line">                previous = previous.previousSibling;</span><br><span class="line">            &#125;</span><br><span class="line">            while (next) &#123;</span><br><span class="line">                if (next.nodeType === 1) &#123;</span><br><span class="line">                    result.push(next);</span><br><span class="line">                &#125;</span><br><span class="line">                next = next.nextSibling;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;;</span><br><span class="line">    var find = function (curEle, cls) &#123;</span><br><span class="line">        var result = [];</span><br><span class="line">        var nodeList = curEle.getElementsByTagName(&apos;*&apos;);</span><br><span class="line">        if (cls) &#123;</span><br><span class="line">            cls = toTrim(cls);</span><br><span class="line">            if (/\.[\w-]/g.test(cls)) &#123;</span><br><span class="line">                cls = cls.replace(/\./, &apos;&apos;);</span><br><span class="line">                for (var i = 0; i &lt; nodeList.length; i++) &#123;</span><br><span class="line">                    var reg = new RegExp(&apos;(?:^|\\s+)&apos; + cls + &apos;(?:\\s+|$)&apos;);</span><br><span class="line">                    if (reg.test(nodeList[i].className)) &#123;</span><br><span class="line">                        result.push(nodeList[i]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                for (var j = 0; j &lt; nodeList.length; j++) &#123;</span><br><span class="line">                    if (nodeList[j].nodeName === cls.toLocaleUpperCase()) &#123;</span><br><span class="line">                        result.push(nodeList[j]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;;</span><br><span class="line">    var getPrevEle = function (curEle) &#123;</span><br><span class="line">        var item = curEle.previousSibling;</span><br><span class="line">        while (item) &#123;</span><br><span class="line">            if (item.nodeType === 1) &#123;</span><br><span class="line">                return item;</span><br><span class="line">            &#125;</span><br><span class="line">            item = item.previousSibling;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    var getPrevAll = function (curEle) &#123;</span><br><span class="line">        var result = [];</span><br><span class="line">        var previous = curEle.previousSibling;</span><br><span class="line">        while (previous) &#123;</span><br><span class="line">            if (previous.nodeName === 1) &#123;</span><br><span class="line">                result.unshift(previous);</span><br><span class="line">            &#125;</span><br><span class="line">            previous = previous.previousSibling;</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;;</span><br><span class="line">    var getNextEle = function (curEle) &#123;</span><br><span class="line">        var item = curEle.nextSibling;</span><br><span class="line">        while (item) &#123;</span><br><span class="line">            if (item.nodeType === 1) &#123;</span><br><span class="line">                return item;</span><br><span class="line">            &#125;</span><br><span class="line">            item = item.nextSibling;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    var getNextAll = function (curEle) &#123;</span><br><span class="line">        var result = [];</span><br><span class="line">        var next = curEle.nextSibling;</span><br><span class="line">        while (next) &#123;</span><br><span class="line">            if (next.nodeName === 1) &#123;</span><br><span class="line">                result.push(next);</span><br><span class="line">            &#125;</span><br><span class="line">            next = next.nextSibling;</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;;</span><br><span class="line">    var getFirstChild = function(curEle)&#123;</span><br><span class="line">        return getEleTagName(curEle)[0];</span><br><span class="line">    &#125;;</span><br><span class="line">    var getLastChild = function(curEle)&#123;</span><br><span class="line">        return getEleTagName(curEle)[getEleTagName(curEle).length-1];</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">        toTrim: toTrim,</span><br><span class="line">        toJSON: toJSON,</span><br><span class="line">        toArray: toArray,</span><br><span class="line">        getEleClassName: getEleClassName,</span><br><span class="line">        getEleChildren: getEleChildren,</span><br><span class="line">        css: css,</span><br><span class="line">        offset: offset,</span><br><span class="line">        winBox: winBox,</span><br><span class="line">        hasClass: hasClass,</span><br><span class="line">        addClass: addClass,</span><br><span class="line">        removeClass: removeClass,</span><br><span class="line">        addEventHandler: addEventHandler,</span><br><span class="line">        removeEventHandler: removeEventHandler,</span><br><span class="line">        siblings: siblings,</span><br><span class="line">        find: find,</span><br><span class="line">        getPrevEle:getPrevEle,</span><br><span class="line">        getPrevAll:getPrevAll,</span><br><span class="line">        getNextEle:getNextEle,</span><br><span class="line">        getNextAll:getNextAll,</span><br><span class="line">        getFirstChild:getFirstChild,</span><br><span class="line">        getLastChild:getLastChild</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>封装一些我们常用的方法，可以让我们的开发更具有效率。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Tue Mar 20 2018 21:03:19 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;平时在工作中我们在使用javascript开发的时候会很怀念jQuery，因为Jquery中很多的方法都非常的好用，而且还能兼容ie的低版本浏览器，虽
      
    
    </summary>
    
      <category term="原生js" scheme="http://yoursite.com/categories/%E5%8E%9F%E7%94%9Fjs/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
</feed>
